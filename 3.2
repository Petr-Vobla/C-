using System;

public abstract class BaseArray
{
    public abstract void Initialize(bool fillByUser = false);
    public abstract double GetAverage();
    public abstract void PrintArray();
}

public sealed class Array : BaseArray
{
    private int[] array;

    public override void Initialize(bool fillByUser = false)
    {
        Console.WriteLine("Создание одномерного массива:");
        Console.Write("Введите длину массива:");
        int length = int.Parse(Console.ReadLine());
        array = new int[length];

        if (fillByUser)
        {
            for (int i = 0; i < array.Length; i++)
            {
                Console.Write($"Введите элемент под номером: {i + 1}: ");
                array[i] = int.Parse(Console.ReadLine());
            }
        }
        else
        {
            Random random = new Random();

            for (int i = 0; i < array.Length; i++)
            {
                array[i] = random.Next(1, 100);
            }
        }
    }
    public override void PrintArray()
    {
        Console.WriteLine("Вывод одномерного массива:");
        foreach (int value in array)
        {
            Console.Write(value + " ");
        }

        Console.WriteLine();
    }

    public override double GetAverage()
    {
        double sum = 0;

        foreach (int value in array)
        {
            sum += value;
        }

        return sum / array.Length;
    }


    public void DeleteElementsBiggerThan100()
    {
        int Index = 0;
        for (int i = 0; i < array.Length; i++)
        {
            if (array[i] < 100)
            {
                if (array[i] > 100)
                {
                    Index += 1;
                }
            }
        }
        int[] newArray = new int[Index];

        int NewIndex = 0;

        foreach (int num in array)
        {
            if (num >= -100 && num <= 100)
            {
                newArray[NewIndex] = num;
                NewIndex += 1;
            }
        }
        for (int i = 0; i < array.Length; i++)
        {
            Console.Write(newArray[i] + " ");
        }
        Console.WriteLine();
    }



    public int[] RemoveDuplicates()
    {
        int calc = 0;

        int[] ArrayWithOutDublicates = new int[array.Length];

        for (int i = 0; i < array.Length; i++)
        {
            ArrayWithOutDublicates[i] = int.MinValue;
        }
        for (int i = 0; i < array.Length; i++)
        {
            for (int j = 0; j < ArrayWithOutDublicates.Length; j++)
                if (ArrayWithOutDublicates[j] != ArrayWithOutDublicates[i])
                {
                    ArrayWithOutDublicates[calc] = array[i];
                    calc++;
                }
        }
        int[] NewArrayWithOutDublicates = new int[calc];
        for (int i = 0; i < NewArrayWithOutDublicates.Length; i++)
        {
            NewArrayWithOutDublicates[i] = ArrayWithOutDublicates[i];
        }
        return NewArrayWithOutDublicates;


    }


    public sealed class Matrix : BaseArray
    {
        private int[,] array;

        public override void Initialize(bool fillByUser = false)
        {
            Console.WriteLine("Создание матрицы:");
            Console.Write("Введите количество рядов: ");
            int rows = int.Parse(Console.ReadLine());
            Console.Write("Введите количество строчек: ");
            int columns = int.Parse(Console.ReadLine());
            array = new int[rows, columns];

            if (fillByUser)
            {
                for (int i = 0; i < array.GetLength(0); i++)
                {
                    for (int j = 0; j < array.GetLength(1); j++)
                    {
                        Console.Write($"Введите элемент под номером: [{i + 1}, {j + 1}]: ");
                        array[i, j] = int.Parse(Console.ReadLine());
                    }
                }
            }
            else
            {
                Random random = new Random();

                for (int i = 0; i < array.GetLength(0); i++)
                {
                    for (int j = 0; j < array.GetLength(1); j++)
                    {
                        array[i, j] = random.Next(1, 100);
                    }
                }
            }
        }
        public override void PrintArray()
        {
            Console.WriteLine("Вывод матрицы:");
            for (int i = 0; i < array.GetLength(0); i++)
            {
                for (int j = 0; j < array.GetLength(1); j++)
                {
                    Console.Write(array[i, j] + " ");
                }
                Console.WriteLine();
            }
        }
        public void PrintArrayWithEvenReversedRows()
        {

            for (int i = 0; i < array.GetLength(0); i++)
            {
                if (i % 2 == 1)
                {
                    for (int j = array.GetLength(1) - 1; j >= 0; j--)
                    {
                        Console.Write(array[i, j] + " ");
                    }
                }
                else
                {
                    for (int j = 0; j < array.GetLength(1); j++)
                    {
                        Console.Write(array[i, j] + " ");
                    }
                }

                Console.WriteLine();
            }
        }

        public override double GetAverage()
        {
            double sum = 0;

            for (int i = 0; i < array.GetLength(0); i++)
            {
                for (int j = 0; j < array.GetLength(1); j++)
                {
                    sum += array[i, j];
                }
            }

            return sum / array.Length;
        }
    }
    public sealed class JaggedArray : BaseArray
    {
        private int[][] array;

        public override void Initialize(bool fillByUser = false)
        {

            Console.WriteLine("Создание ступенчатого массива");
            Console.Write("Введите количество рядов: ");
            int rows = int.Parse(Console.ReadLine());
            array = new int[rows][];

            for (int i = 0; i < array.Length; i++)
            {
                Console.Write($"Введите количество элементов в ряду: {i + 1}: ");
                int length = int.Parse(Console.ReadLine());
                array[i] = new int[length];

                if (fillByUser)
                {
                    for (int j = 0; j < array[i].Length; j++)
                    {
                        Console.Write($"Введите элемент {i + 1} под номером {j + 1}: ");
                        array[i][j] = int.Parse(Console.ReadLine());
                    }
                }
                else
                {
                    Random random = new Random();

                    for (int j = 0; j < array[i].Length; j++)
                    {
                        array[i][j] = random.Next(1, 100);
                    }
                }
            }
        }

        public override double GetAverage()
        {
            double sum = 0;
            int elementsCount = 0;

            for (int i = 0; i < array.Length; i++)
            {
                for (int j = 0; j < array[i].Length; j++)
                {
                    sum += array[i][j];
                    elementsCount++;
                }
            }

            return sum / elementsCount;
        }

        public double[] GetAveragesInInnerArrays()
        {
            double[] averages = new double[array.Length];

            for (int i = 0; i < array.Length; i++)
            {
                double sum = 0;

                for (int j = 0; j < array[i].Length; j++)
                {
                    sum += array[i][j];
                }

                averages[i] = sum / array[i].Length;
            }

            return averages;
        }

        public void ChangeEvenElements()
        {
            for (int i = 0; i < array.Length; i++)
            {
                for (int j = 0; j < array[i].Length; j++)
                {
                    if (array[i][j] % 2 == 0)
                    {
                        array[i][j] = i * j;
                    }
                }
            }
        }

        public override void PrintArray()
        {
            Console.WriteLine("Вывод ступенчатого массива:");
            for (int i = 0; i < array.Length; i++)
            {
                for (int j = 0; j < array[i].Length; j++)
                {
                    Console.Write(array[i][j] + " ");
                }
                Console.WriteLine();
            }
        }

        public class Program
        {
            public static void Main(string[] args)
            {
                BaseArray[] array = new BaseArray[3];
                array[0] = new Array();
                array[1] = new Matrix();
                array[2] = new JaggedArray();

                for (int i = 0; i < array.Length; i++)
                {
                    Console.WriteLine($"Операции для массива {i + 1}");
                    array[i].Initialize();
                    double average = array[i].GetAverage();
                    Console.WriteLine($"Cреднее: {average}");
                    array[i].PrintArray();
                }
                Array Array = new Array();
                Array.DeleteElementsBiggerThan100();
                Array.RemoveDuplicates();

                Matrix matrix = new Matrix();
                matrix.PrintArrayWithEvenReversedRows();

                JaggedArray jaggedArray = new JaggedArray();
                jaggedArray.GetAveragesInInnerArrays();
                jaggedArray.ChangeEvenElements();
            }
        }
    }
}
